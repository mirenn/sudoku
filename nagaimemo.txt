Azureへのデプロイ
C:\Users\ngihy\Desktop\nodeserverの階層で。以下コマンドを叩く。
（古いzipがあったらそれは削除する。）
rm nodeserver.zip
rm index.js
npm run build
mv .\dist\index.js ./
Compress-Archive -Path * -DestinationPath nodeserver.zip
az webapp deploy --resource-group nagairesource --name sudokunagai --src-path C:\Users\ngihy\Desktop\nodeserver\nodeserver.zip
↑uploadscript.ps1で全て実行できる。

実行コマンド↓
npx ts-node index.ts(今はnpm run startで動くようにしている)
↓答えを作るコマンドは確か以下のような感じ。旧PCのwsl2上で実行（powershellだとどうしても出力をテキストファイルに出せなかった）
java -jar NP.jar -s .\data\Problem500.txt

参考
CSS待ち状態
https://projects.lukehaas.me/css-loaders/
数独自動生成
https://github.com/timedia/puzzle-generator

実装済み
・useridをsocket.dataに紐づける
　・もし同一userid同士の対決であれば、subuseridを用いるゲームモードにする。
再接続用の処理
　・roomIDを投げてログインしにいく
　・同じブラウザ同士時は再接続はまともに機能しない。これをどうこうするのは無駄に面倒なので

メモ
//・連打制限?（前の入力から0.1秒以上は開けるようにする）

useridを
レート計算＝＞適当に画面側で固定の数値足したり引いたり
まず、planet scaleのDBに接続できることの確認

ネットワーク例外処理周り
・相手がいなくなったときの処理
・そもそも自分がサーバーに繋がらないとき

正解か不正解かは画面上で丸かバツかなどで分かるべき
user_guidが知られると困るのでそれぞれに返すboardの情報からuserguidを抜いて1か2で自分か相手かを意味するようにする
DB上にguidとレートを持ちたいがそうすると一気に価格が跳ね上がるのでどうするかな……
planetsearchでDB作ってみようと思う

CREATE TABLE `users` (
  `id` binary(16) NOT NULL PRIMARY KEY,
  `name` varchar(24) NOT NULL,
  `rate` INT
);

と、していたがplanet searchDBに接続するにはplanet search cliという
ソフトが必要で、、コンテナにそれをインストールすることができない以上無理。
したがって、azureのDBを使う方法を模索する
https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/tutorial-nodejs-web-app

favicon.ico
https://icooon-mono.com/11343-%e3%83%aa%e3%82%b9%e3%81%ae%e3%82%a2%e3%82%a4%e3%82%b3%e3%83%b3%e3%81%a7%e3%81%99%e3%81%9f%e3%81%84%e3%80%82/


ボタンとニックネームに関しては横並びのが良かったので
直す

みすった……
pubUserIdに他人のものを入れた場合成り代わることができる。
成り代わるというのはrankingを自分のものにできるということ。
pubUserIdとuserIdで一意なものにすれば成り代わりは防げる。
別アカウント扱いにできる。


    //データが何一つないときは以下ソースでINSERT
    // const items = [
    //     {
    //         "pk": "A",
    //         "id": '838c8664-f99c-4d03-a90b-3935944005c4',
    //         "name": 'nagainame',
    //         "rate": 1500
    //     }];
    // Create all items
    // for (const item of items) {
    //     const { resource } = await container.items.create(item);
    //     console.log(resource, ' inserted');
    // }

        // ディレクトリでindex.htmlをリク・レス
    // app.get('/', (req, res) => {
    //     res.sendFile(__dirname  + '/public/index.html');
    //   });